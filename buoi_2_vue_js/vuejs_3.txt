Event Handling:
1.1.Lang nghe su kien:
-Trong vue.js chúng ta có th? dùng directive v-on dể  lắng nghe các sự kiện DOM và thực thi Javascript khi nhúng sự kiện 
này duợc kích hoạt
<div id="example-1">
	<button v-on:click="counter + =1">Ðếm cừu</button>
	<p>{{counter}} con c?u</p>
</div>
1.2.Phuong thức xử lý sự kiện:
-Trong thực tế,logic để xử lý sự kiện thường phức tạp hon,vì thế chứa javascript trực tiếp trong giá trị của thuôc tính v-on
nhu trên là k khả thi.Ðó là lí do do v-on cung có thể nhận tên của 1 phuong thúc mà bạn muốn gửi.
-Và bạn cung có thể truyền tham số vào các hàm này khi gọi chúng ở DOM(nhu javascript thuần)
-Nếu nhu ban muốn sử dụng các thông số mặc dịnh của sự kiện thì trong vue js cung hổ trợ bạn
luôn,bằng cách các bạn truyen thêm vào hàm biến $event.
<button v-on:click="demcuu">Dem cuu</button>
<p>{{counter}} con cuu</p>
<button v-on:click="demcuux2">Dem cuu</button>
<button v-on:click="demcuu1(5)">Dem cuu</button>
<p>{{counter}} x2 con cuu</p>
<select v-on:change="chonkhoahoc" v-model="khoahoc">
	<option value="Fullstack java">Fullstack java</option>
	<option value="Fullstack php">Fullstack php</option>
	<option value="Fullstack javascript">Fullstack javascript</option>
	<option value="Fullstack C#">Fullstack C#</option>
<select>
<script>
	export default {
	name:"HelloWorld",
	data() {
		return {
		counter:0,
		khoahoc:'',	
	},
	method: {
		demcuu() {
		this.counter++
		},
		demcuu1(SoNhan){
			this.counter=this.counter*SoNhan;
		},
		demcuux2() {
		this.counter=counter+2
		},
		chonkhoahoc() {
			var msg ='Ban vua chon khoa hoc' +this.khoahoc;
			alert(msg);
		}
	}
</script>


1.3.Event modifier:
-Trong rất nhiều trường hợp,chúng ta cần gọi event.preventDefault() hoặc event.stopPropagation()
bên trong 1 phương thức sử lý xự kiện.
-Tuy việc này k có gì khó,sẽ tốt hơn nếu các phương thức chỉ phải tập trung giải quyết dữ liệu
thay vì cáng đáng các sự kiện DOM
-Để giải quyết vấn dề này,Vue cung cấp các event modifier cho v-on.Event modifier là 1 hậu tố (postfix)
cho directive,được biểu thị bằng 1 dấu chấm.
.stop
.prevent
.capture
.self
.once
.passive
<button v-on:click.once="demcuu1(5)">Dem cuu</button>
<!-- the click event's propagation will be stopped -->
<a v-on:click.stop="doThis"></a>

<!-- the submit event will no longer reload the page -->
<form v-on:submit.prevent="onSubmit"></form>

<!-- modifiers can be chained -->
<a v-on:click.stop.prevent="doThat"></a>

<!-- just the modifier -->
<form v-on:submit.prevent></form>

<!-- use capture mode when adding the event listener -->
<!-- i.e. an event targeting an inner element is handled here before being handled by that element -->
<div v-on:click.capture="doThis">...</div>

<!-- only trigger handler if event.target is the element itself -->
<!-- i.e. not from a child element -->
<div v-on:click.self="doThat">...</div>
<p>{{counter}} x2 con cuu</p>
<script>
	export default {
	name:"HelloWorld",
	data() {
		return {
		counter:0
		
	},
	method: {
		
		demcuu1(SoNhan){
			this.counter=this.counter*SoNhan;
		}
	}
</script>



1.4.key modifier:
-Khi lắng nghe các sự kiện bàn phím(keyboard event),chúng
ta phải thường kiểm tra bàn phím(key code).Vue hỗ trợ key modifier (modifier cho mã phím)
 cho v-on trong các trường hơp này:
<!-- chỉ gọi vm.submit() khi key code là 13 là phím enter -->
<input v-on:keyup.13="submit">
-Tất nhiên nếu phải nhớ toàn bộ các mã phím thì rất mệt mỏi,nên Vue cung cấp alias(bi danh)
cho các phím thông dụng nhất:
.enter
.tab
.delete (captures both “Delete” and “Backspace” keys)
.esc
.space
.up
.down
.left
.right

<input v-on:keyup.enter="submit">
Bạn cũng có thể định nghĩa alias cho key modifier bằng object toàn cục
config.keyCodes:
//Cho phép sử dụng v-on:keyup.f1
vue.config.keyCodes.f1= 112
<input value="submit" v-on:keyup.enter="submit">
<script>
	export default{
	name:"g",
	data() {
	return {
	
	}
	}
	methods: {
		submit() {
			alert("Submit thanh cong");
		}
	}
</script>
2.Using javascript expressions:
-Cho đến nay chúng ta chỉ mới bind vào các khóa thuộc tính đơn giản trong 
template.Tuy nhiên, thật ra vue hổ trợ sức mạnh toàn diện của 
các biểu thức Javascript ben trong toàn bộ các
ràng buộc dữ liệu (data binding);
-Như mình có nói ở bài trước là chúng ta có thể sử dụng code javascript trong cặp dấu {{}}
nhưng các bạn cần chú ý là chúng ta có thể sử dụng các scope đã được khai báo mặc dinh
trong javascript thôi còn các biến hay object,..mà người dùng tự định nghĩa thì sẻ không thể sử dụng được
